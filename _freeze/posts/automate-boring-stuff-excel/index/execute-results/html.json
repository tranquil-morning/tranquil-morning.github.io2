{
  "hash": "a26b97868f0f0e43a0800b5ffe5aa34c",
  "result": {
    "markdown": "---\ntitle: \"Automate Boring Stuff - Excel\"\nauthor: \"Jinwook Chang\"\ndate: \"2023-08-20\"\ndate-modified: \"2023-08-20\"\ncategories: [DataScience, Script]\n---\n\n본 자료는 Al Swigart가 쓴 [Automate The Boring Stuff with Python](https://automatetheboringstuff.com/) 교재의 [13장](https://automatetheboringstuff.com/2e/chapter13/)을 요약한 글입니다.\n\n`openpyxl` 라이브러리를 활용하여 지루한 작업을 자동화해보도록 하겠습니다.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport openpyxl\nwb = openpyxl.load_workbook('example.xlsx')\nprint(type(wb))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'openpyxl.workbook.workbook.Workbook'>\n```\n:::\n:::\n\n\n![](example.png)\n\n`workbook`은 엑셀 문서 그 자체를 나타냅니다. 이제 이 문서의 `sheet`에 접근하겠습니다.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nprint(wb.sheetnames)\nsheet = wb['Sheet3']\nprint(type(sheet))\n\nprint(sheet.title)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Sheet1', 'Sheet2', 'Sheet3']\n<class 'openpyxl.worksheet.worksheet.Worksheet'>\nSheet3\n```\n:::\n:::\n\n\n이제 `sheet` 안의 `cell`의 정보에 접근해보겠습니다.\n`cell`은 주소로 접근할 수도 있으나, row / column을 지정할 수도 있습니다.\n또한 `sheet`의 `max_row` / `max_column`을 통하여 최대 행과 열을 파악할 수 있습니다.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nsheet = wb['Sheet1']\ncell = sheet['A1']\n\nprint(cell.coordinate)\nprint(cell.value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA1\n2015-04-05 13:34:02\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfor i in range(1, 8):\n  print(f'{sheet.cell(row = i, column = 2).coordinate} : {sheet.cell(row = i, column = 2).value}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nB1 : Apples\nB2 : Cherries\nB3 : Pears\nB4 : Oranges\nB5 : Apples\nB6 : Bananas\nB7 : Strawberries\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nprint(f\"{sheet.max_row} : {sheet.max_column}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n7 : 3\n```\n:::\n:::\n\n\n`cell`의 주소를 쉽게 숫자로 바꾸어주거나, 숫자를 주소로 변환해주는 함수 역시 지원합니다.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfrom openpyxl.utils import get_column_letter, column_index_from_string\n\nprint(get_column_letter(27))\nprint(column_index_from_string('AA'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAA\n27\n```\n:::\n:::\n\n\n이제 여러 `cell`에 한번에 접근해보겠습니다.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfor i in sheet['A1' : 'C3']:\n  p = \"\"\n  for j in i:\n    p += str(j.value)\n    p += \" \"\n  print(p)\n\n\nsheet['A':'A']\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2015-04-05 13:34:02 Apples 73 \n2015-04-05 03:41:23 Cherries 85 \n2015-04-06 12:46:51 Pears 14 \n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n(<Cell 'Sheet1'.A1>,\n <Cell 'Sheet1'.A2>,\n <Cell 'Sheet1'.A3>,\n <Cell 'Sheet1'.A4>,\n <Cell 'Sheet1'.A5>,\n <Cell 'Sheet1'.A6>,\n <Cell 'Sheet1'.A7>)\n```\n:::\n:::\n\n\n다음을 통해 excel 내 formula 역시 사용할 수 있습니다.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nsheet = wb['Sheet2']\nsheet['A1'] = 200\nsheet['A2'] = 300\nsheet['A3'] = '=SUM(A1:A2)'\n\nwb.save('writeformula.xlsx')\n```\n:::\n\n\n![](example2.png)\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}