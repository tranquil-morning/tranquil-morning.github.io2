---
title: "LangChain Output Parser"
author: "Jinwook Chang"
date: "2023-06-04"
date-modified: "2023-06-04"
categories: [AI, NLP, LangChain, Script]
---

![](../../others/prompt.png)


[DeepLearning.AI](https://www.deeplearning.ai/)에서 제공하는 LangChian for LLM Application Development 강좌를 요약한 글입니다.

목차 :

* [Prompt Template](../langchain-prompt-template/)
* [Output Parser](../langchain-output-parser/)
* [Memory](../langchain-memory/)
* [Chain](../langchain-chains/)
* [Q&A](../langchain-qna)

LangChain은 큰 언어 모델(Large Language Models, LLMs)을 사용하여 애플리케이션을 구축하는 개발자들을 돕기 위한 라이브러리입니다. \
이번 자료에서는 LangChain을 통해 Output Parser를 작성해보도록 하겠습니다.

### Install and Load Libraries

```python
#!pip install python-dotenv
#!pip install openai
#!pip install --upgrade langchain

import os
import openai
openai.api_key = "YOUR_API_KEY"
from langchain.chat_models import ChatOpenAI
```

### Setting openAI model

```python
# To control the randomness and creativity of the generated
# text by an LLM, use temperature = 0.0
chat = ChatOpenAI(temperature=0.0) # make output less random
chat
```

```python
ChatOpenAI(verbose=False, callbacks=None, callback_manager=None, client=<class 'openai.api_resources.chat_completion.ChatCompletion'>, model_name='gpt-3.5-turbo', temperature=0.0, model_kwargs={}, openai_api_key=None, openai_api_base=None, openai_organization=None, request_timeout=None, max_retries=6, streaming=False, n=1, max_tokens=None)
```

제품 리뷰에서 특정 정보를 JSON으로 추출하는 프롬프트를 생각해 봅시다.

### Output Parser의 필요성

```python
customer_review = """\
This leaf blower is pretty amazing.  It has four settings:\
candle blower, gentle breeze, windy city, and tornado. \
It arrived in two days, just in time for my wife's \
anniversary present. \
I think my wife liked it so much she was speechless. \
So far I've been the only one using it, and I've been \
using it every other morning to clear the leaves on our lawn. \
It's slightly more expensive than the other leaf blowers \
out there, but I think it's worth it for the extra features.
"""

review_template = """\
For the following text, extract the following information:

gift: Was the item purchased as a gift for someone else? \
Answer True if yes, False if not or unknown.

delivery_days: How many days did it take for the product \
to arrive? If this information is not found, output -1.

price_value: Extract any sentences about the value or price,\
and output them as a comma separated Python list.

Format the output as JSON with the following keys:
gift
delivery_days
price_value

text: {text}
"""
```

이 프롬프트를 이전의 prompt template으로 만들 수 있겠으나, \
그럴 경우 output이 String이기에 python에서 사용하려면 추가적인 변환이 필요합니다. \
LangChain의 output parser 기능을 활용하여 손쉽게 json을 추출해봅시다.

### Output Parser 활용하기

```python
from langchain.prompts import ChatPromptTemplate
from langchain.output_parsers import ResponseSchema
from langchain.output_parsers import StructuredOutputParser


chat = ChatOpenAI(temperature=0.0)
```

우선 return 값에 대한 스키마를 정해줘야 합니다.

```python
gift_schema = ResponseSchema(name="gift",
                             description="Was the item purchased\
                             as a gift for someone else? \
                             Answer True if yes,\
                             False if not or unknown.")
delivery_days_schema = ResponseSchema(name="delivery_days",
                                      description="How many days\
                                      did it take for the product\
                                      to arrive? If this \
                                      information is not found,\
                                      output -1.")
price_value_schema = ResponseSchema(name="price_value",
                                    description="Extract any\
                                    sentences about the value or \
                                    price, and output them as a \
                                    comma separated Python list.")

response_schemas = [gift_schema, 
                    delivery_days_schema,
                    price_value_schema]

output_parser = StructuredOutputParser.from_response_schemas(response_schemas)
format_instructions = output_parser.get_format_instructions()
```

스키마 작성을 완료하였으니, 템플릿에 스키마를 포함합니다.

```python
review_template = """\
For the following text, extract the following information:

gift: Was the item purchased as a gift for someone else? \
Answer True if yes, False if not or unknown.

delivery_days: How many days did it take for the product\
to arrive? If this information is not found, output -1.

price_value: Extract any sentences about the value or price,\
and output them as a comma separated Python list.

text: {text}

{format_instructions}
"""
```

이제 `output_parser`로 결과 값을 변환해봅시다.

```python
prompt = ChatPromptTemplate.from_template(template=review_template)
messages = prompt.format_messages(text=customer_review, 
                                format_instructions=format_instructions)
response = chat(messages)
output_dict = output_parser.parse(response.content)
```

```python
output_dict
```

```python
{'gift': True,
 'delivery_days': '2',
 'price_value': ["It's slightly more expensive than the other leaf blowers out there, but I think it's worth it for the extra features."]}
 ```


