---
title: "LangChain Prompt Template"
author: "Jinwook Chang"
date: "2023-06-03"
date-modified: "2023-06-03"
categories: [AI, NLP, LangChain, Script]
---

![](../../others/prompt.png)


[DeepLearning.AI](https://www.deeplearning.ai/)에서 제공하는 LangChian for LLM Application Development 강좌를 요약한 글입니다.

목차 :

* [Prompt Template](../langchain-prompt-template/)
* [Output Parser](../langchain-output-parser/)

LangChain은 큰 언어 모델(Large Language Models, LLMs)을 사용하여 애플리케이션을 구축하는 개발자들을 돕기 위한 라이브러리입니다. \
이번 자료에서는 LangChain을 통해 Prompt Template를 작성해보도록 하겠습니다.

### Install and Load Libraries

```python
#!pip install python-dotenv
#!pip install openai
#!pip install --upgrade langchain

import os
import openai
openai.api_key = "YOUR_API_KEY"
from langchain.chat_models import ChatOpenAI
```

### Setting openAI model

```python
# To control the randomness and creativity of the generated
# text by an LLM, use temperature = 0.0
chat = ChatOpenAI(temperature=0.0) # make output less random
chat
```

```python
ChatOpenAI(verbose=False, callbacks=None, callback_manager=None, client=<class 'openai.api_resources.chat_completion.ChatCompletion'>, model_name='gpt-3.5-turbo', temperature=0.0, model_kwargs={}, openai_api_key=None, openai_api_base=None, openai_organization=None, request_timeout=None, max_retries=6, streaming=False, n=1, max_tokens=None)
```

### Make template with LangChain

특정 `text`를 특정 `style`로 바꿔주는 프롬프트를 생각해봅시다.

```python
template_string = """Translate the text \
that is delimited by triple backticks \
into a style that is {style}. \
text: ```{text}```
"""
```

```python
from langchain.prompts import ChatPromptTemplate
prompt_template = ChatPromptTemplate.from_template(template_string)
```

LangChain의 `ChatPromptTemplate.from_template`을 통하여 위 프롬프트를 템플릿화 할 수 있습니다. \
만들어진 템플릿을 확인해봅시다.

```python
prompt_template.messages[0].prompt
```

```python
PromptTemplate(input_variables=['style', 'text'], output_parser=None, partial_variables={}, template='Translate the text that is delimited by triple backticks into a style that is {style}. text: ```{text}```\n', template_format='f-string', validate_template=True)
```

```python
prompt_template.messages[0].prompt.input_variables
```

```python
['style', 'text']
```

템플릿이 완성되었으니, 활용해보도록 합시다.

### Using Template


```python
customer_style = """translate to Korean \
in a very rude tone
"""

customer_email = """
Arrr, I be fuming that me blender lid \
flew off and splattered me kitchen walls \
with smoothie! And to make matters worse, \
the warranty don't cover the cost of \
cleaning up me kitchen. I need yer help \
right now, matey!
"""
customer_messages = prompt_template.format_messages(
                    style=customer_style,
                    text=customer_email)

# Call the LLM to translate to the style of the customer message
customer_response = chat(customer_messages)
```

결과는 다음과 같습니다.

```python
"""```이런 새끼야, 믹서기 뚜껑이 날아가서 스무디가 주방 벽에 튀어버렸잖아! \
그리고 더 나쁜 건 보증이 내 주방 청소 비용을 보상해주지 않는다는 거야. \
지금 당장 도와줘, 이 녀석아!```"""
```

이에 대한 답변도 한번 생성해봅시다.

```python
service_reply = """Hey there customer, \
the warranty does not cover \
cleaning expenses for your kitchen \
because it's your fault that \
you misused your blender \
by forgetting to put the lid on before \
starting the blender. \
Tough luck! See ya!
"""

service_messages = prompt_template.format_messages(
    style=customer_style,
    text=service_reply)

service_response = chat(service_messages)
print(service_response.content)
```

생성된 답변은 다음과 같습니다.

```python
"""어이 고객아, 보증은 네가 블렌더를 작동하기 전에 뚜껑을 덮지 않아서 잘못 사용한 것이니까 \
네가 청소 비용을 부담해야 한다는 거다. 운이 나쁘네! 안녕!"""
```

